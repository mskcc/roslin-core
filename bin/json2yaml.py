#!/usr/bin/env python
 
import argparse
import simplejson
import sys
import yaml

def merge(yaml1, yaml2):
    if isinstance(yaml1,dict) and isinstance(yaml2,dict):
        for k,v in yaml2.iteritems():
            if k not in yaml1:
                yaml1[k] = v
            else:
                yaml1[k] = merge(yaml1[k],v)
    return yaml1

def create_roslin_yaml(input_file, output_file, original_yaml_file):
    f = open(input_file, 'rb')
    outfile = open(output_file, 'wb')
    data = simplejson.loads(str(f.read()))
    
    s = yaml.dump(data, default_flow_style=False) 

    yaml1 = yaml.load(s)
    yaml2 = yaml.load(open(original_yaml_file, 'rb'))

    result = merge(yaml1, yaml2)

    yaml.dump(result, outfile,  default_flow_style=False)
    return output_file

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--input_file", "-i", required=True, help="The output-meta.json file, generated after a cwl run.")
    parser.add_argument("--original_yaml", "-y", required=True, help="The initial inputs.yaml file generated by roslin_request_to_yaml.py")
    parser.add_argument("--output_file", "-o", required=True, help="Output YAML file.")
    
    args = parser.parse_args()

    create_roslin_yaml(args.input_file, args.output_file, args.original_yaml)
